
// Parser combinators
use std::{result::{Result, Result::{Ok, Err}}, option::{Option, Option::{Some, None}}};
pub mod n64 = "./n64.vi";
pub use n64::N64;

// (consumed, remaining)
pub struct State(List[Char], List[Char]);

pub mod State {
	pub fn consumed(&State(a, _): &State) -> N32 {
		a.len()
	}
	pub fn remaining(&State(_, b): &State) -> N32 {
		b.len()
	}
	pub fn backtrack_one(&State(a, b): &State) {
		if a.pop_front() is Some(a) {
			b.push_front(a);
		}
	}
	pub fn peek_one(&State(a, b): &State) -> Option[Char] {
		if b.pop_front() is Some(c) {
			b.push_front(c);
			Some(c)
		} else {
			None
		}
	}
	pub fn advance_one(&State(a, b): &State) {
		if b.pop_front() is Some(c) {
			a.push_front(c);
		}
	}
	pub fn from_string(s: String) -> State {
		State([], s)
	}
}

pub fn default_with[T, E](parser: fn(&State) -> Result[T, E], default: fn(&State, E) -> T) -> fn(&State) -> T {
	return fn(&state: &State) {
		let o_consumed = state.consumed();
		match parser(&state) {
			Ok(t) => t,
			Err(e) => {
				// TODO doesn't actually work
				state.backtrack_one();
				default(&state, e)
			}
		}
	}
}
pub fn default[T, E](parser: fn(&State) -> Result[T, E], default: fn(&State) -> T) -> fn(&State) -> T {
	default_with(parser, fn(s, e) { default(s) })
}
pub fn before[T, U](ignore: fn(&State) -> T, after: fn(&State) -> U) -> fn(&State) -> U {
	return fn(&state: &State) {
		ignore(&state);
		after(&state)
	}
}
pub fn after[T, U](before: fn(&State) -> T, ignore: fn(&State) -> U) -> fn(&State) -> T {
	return fn(&state: &State) {
		let r = before(&state);
		ignore(&state);
		r
	}
}
pub fn pair[T, U](fst: fn(&State) -> T, snd: fn(&State) -> U) -> fn(&State) -> (T, U) {
	return fn(&state: &State) {
		let fst = fst(&state);
		let snd = snd(&state);
		(fst, snd)
	}
}
fn char_to_n32(c: Char) -> Option[N32] {
	let c = c.as_n32();
	if c >= '0'.as_n32() && c <= '9'.as_n32() {
		Some(c - '0'.as_n32())
	} else {
		None
	}
}
pub fn parse_n32(&state: &State) -> Result[N32, String] {
	if state.peek_one() is Some(c) && char_to_n32(c) is Some(n) {
		state.advance_one();
		loop {
			if state.peek_one() is Some(c) && char_to_n32(c) is Some(d) {
				state.advance_one();
				n = n * 10 + d;
			} else {
				return Ok(n)
			}
		}
	} else { 
		return Err("parse_n32: reached EOF!") 
	}
}
pub fn parse_n64(&state: &State) -> Result[N64, String] {
	if state.peek_one() is Some(c) && char_to_n32(c) is Some(n) {
		let n: N64 = N64::from_n32(n);
		state.advance_one();
		loop {
			if state.peek_one() is Some(c) && char_to_n32(c) is Some(d) {
				state.advance_one();
				n = n.mul(N64::from_n32(10)).add(N64::from_n32(d));
			} else {
				return Ok(n)
			}
		}
	} else { 
		return Err("parse_n64: reached EOF!") 
	}
}
pub fn skip_whitespace(&state: &State) {
	// done to avoid divergence bugs
	loop {
		let qux = if state.peek_one() is Some(c) && (c == ' ' || c == '\n' || c == '\t') {
			state.advance_one();
			false
		} else {
			true
		};
		if qux {
			break;
		}
	}
}
pub fn is_eof(&state: &State) -> Bool {
	state.remaining() == 0
}
pub fn invert[T](a: fn(T) -> Bool) -> fn(T) -> Bool {
	return fn(b) {
		!a(b)
	}
}
pub fn map[T, U](parser: fn(&State) -> T, f: fn(T) -> U) -> fn(&State) -> U {
	return fn(state) {
		f(parser(state))
	}
}
pub fn repeat_while[T](repeat: fn(&State) -> T, cond: fn(&State) -> Bool) -> fn(&State) -> List[T] {
	return fn(&state: &State) {
		let l = [];
		loop {
			if !cond(&state) {
				return l;
			}
			l.push_back(repeat(&state));
		}
	}
}
pub fn first_error[T, U](a: List[Result[T, U]]) -> Result[List[T], U] {
	let l = [];
	loop {
		match a.pop_front() {
			Some(Ok(o)) => l.push_back(o),
			Some(Err(e)) => return Err(e),
			None => return Ok(l),
		}
	}
}
pub fn expect[T, U](s: String) -> fn(&State) -> Result[(), String] {
	return fn(&state: &State) {
		while s.pop_front() is Some(c) {
			if state.peek_one().map(fn(x: Char) x == c).unwrap_or(false) {
				state.advance_one();
			} else {
				return Err("Expected " ++ s)
			}
		}
		return Ok(())
	}
}

pub fn fold[A, T](list: List[T], f: fn(A, T) -> A, a: A) -> A {
	let result = a;
	loop {
		if list.pop_front() is Some(i) {
			result = f(result, i);
		} else {
			return result;
		}
	} 
}

pub fn pair_and[T, U, V](parser: fn(&State) -> (Result[T, V], Result[U, V])) -> fn(&State) -> Result[(T, U), V] {
	map(parser, fn((a, b): (Result[T, V], Result[U, V])) {
		a.and_then(fn(u: _) { b.and_then(fn(v: _) Ok((u, v))) })
	})
}

pub fn sum(list: List[N32]) -> N32 {
	fold(list, fn(a: N32, b: N32) { a + b }, 0)
}


pub fn quicksort(l: List[N32]) -> List[N32] {
	if l.pop_front() is Some(pivot) {
		let a = [];
		let b = [];
		loop {
			if l.pop_front() is Some(i) {
				if i <= pivot {
					a.push_back(i);
				} else {
					b.push_back(i);
				}
			} else {
				break;
			}
		}
		a = quicksort(a);
		b = quicksort(b);
		a.concat([pivot]).concat(b)
	} else {
		[]
	}
}
mod mapm = "./map.vi";
// is_lt return true if a <= b
pub fn quicksort_by_state[T, U](l: List[T], is_lt: fn(&U, T, T) -> Bool , &state: &U) -> List[T] {
	if l.pop_front() is Some(pivot) {
		let a = [];
		let b = [];
		loop {
			if l.pop_front() is Some(i) {

				if is_lt(&state, i, pivot) {
					a.push_back(i);
				} else {
					b.push_back(i);
				}
			} else {
				break;
			}
		}
		a = quicksort_by_state(a, is_lt, &state);
		b = quicksort_by_state(b, is_lt, &state);
		a ++ [pivot] ++ b
	} else {
		[]
	}
}

pub fn zip[T, U](a: List[T], b: List[U]) -> List[(T, U)] {
	let result = [];
	loop {
		if a.pop_front() is Some(i) {
			if b.pop_front() is Some(j) {
				result.push_back((i, j))
			} else {
				break result;
			}
		} else {
			break result;
		}
	}
}
