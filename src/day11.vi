use std::option::Option;
use Option::{Some, None};
mod util = "./util.vi";
use util::{repeat_while, parse_n32,skip_whitespace,after,invert,is_eof, State,first_error};
use std::map::Map;
use std::n64::N64;

enum BlinkResult {
  Single(N64),
  Split(N64, N64),
}

mod BlinkResult {
  pub fn calculate(stone: N64) -> BlinkResult { 
    if stone.eq(N64::from_n32(0))  {
      return BlinkResult::Single(N64::from_n32(1))
    };
    let right = stone.to_string();
    if right.len() % 2 == 0 {
      let left = []
      while left.len() != right.len() {
        left.push_back(right.pop_front().unwrap())
      }
      BlinkResult::Split(N64::parse(left).unwrap(), N64::parse(right).unwrap())
    } else {
      BlinkResult::Single(stone.mul(N64::from_n32(2024)))
    }
  }
}

pub fn n64_cmp(&a: &N64, &b: &N64) -> std::map::Ord {
  if a.lt(b) {
    std::map::Ord::Lt
  } else if a.eq(b) {
  std::map::Ord::Eq
  } else {
  std::map::Ord::Gt
  }
}


pub fn run(stone: N64, blinks: N32, &cache: &Map[N64, BlinkResult], &ccache: &Map[N32, Map[N64, N64]]) -> N64 {
  let &ccache_here = ccache.get_or_insert(blinks, Map::new(n64_cmp));
  if ccache_here.get(&stone) is Some(rcount) {
    return *rcount;
  }
  let count = if blinks == 0 {
    N64::from_n32(1)
  } else {
    let result = if cache.get(&stone) is Some(result) {
      *result
    } else {
      let result = BlinkResult::calculate(stone)
      cache.insert(stone, result)
      result
    };
    match result {
      BlinkResult::Single(n) => run(n, blinks-1,&cache, &ccache),
      BlinkResult::Split(a,b) => {
        run(a, blinks-1,&cache, &ccache).add(run(b, blinks-1,&cache,&ccache))
      },
    }
  };
  ccache_here.insert(stone, count);
  count
}

pub fn main(&io: &IO) {
  let input = io.full_input();
  let parser = repeat_while(after(parse_n32, skip_whitespace),invert(is_eof));
  let a = first_error(parser(&State::from_string(input))).unwrap_or([]);
  let cache = Map::new(n64_cmp);
  let ccache = Map::new(N32::cmp);
  dyn fn calc(blinks: N32) {
    let b = a;
    let count = N64::from_n32(0);
    while b.pop_front() is Some(i)  {
      count = count.add(run(N64::from_n32(i), blinks, &cache, &ccache));
    }
    count
  }
  io.println("Part 1: " ++ calc(25).to_string());
  io.println("Part 2: " ++ calc(75).to_string());
}
