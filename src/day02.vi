
mod util = "./util.vi";
use util::{fold, map, repeat_while, before, skip_whitespace, is_eof, first_error, invert, parse_n32, State};
use std::{result::{Result, Result::{Ok, Err}}, option::{Option, Option::{Some, None}}};

pub fn report_is_safe(levels: List[N32]) -> Bool {
	let levels_adv = levels;
	levels_adv.pop_front();
	let increasing = None;
	loop {
		let j = levels_adv.pop_front();
		let i = levels.pop_front();
		if i is Some(i) && j is Some(j) {
			if i > j {
				if increasing.unwrap_or(false) == true {
					break false;
				}
				increasing = Some(false)
				if i - j < 1 || i - j > 3 {
					break false;
				}
			} else {
				if increasing.unwrap_or(true) == false {
					break false;
				}
				increasing = Some(true)
				if j - i < 1 || j - i > 3 {
					break false;
				}
			}
		} else {
			break true;
		}
	}
}


pub fn part_one(&io: &IO) {
	let parser = map(repeat_while(before(skip_whitespace, parse_n32), invert(is_eof)), first_error);
	let n = 0;
	loop {
		if io.read_line() is Some(s) {
			let s = State::from_string(s);
			let result = parser(&s);
			if result is Ok(report) {
				if report_is_safe(report) {
					n += 1;
				}
			}
		} else {
			break;
		}
	}
	io.println(n.to_string())
}


pub fn part_two(&io: &IO) {
	let parser = map(repeat_while(before(skip_whitespace, parse_n32), invert(is_eof)), first_error);
	let n = 0;
	loop {
		if io.read_line() is Some(s) {
			let s = State::from_string(s);
			let result = parser(&s);
			if result is Ok(report) {
				let possible_reports = [];
				loop {
					if possible_reports.len() == report.len() {
						break;
					}
					let i = 0;
					let building_report = [];
					let this_report = report;
					loop {
						if this_report.pop_front() is Some(a) {
							if i != possible_reports.len() {
								building_report.push_back(a);
							}
							i += 1;
						} else {
							break;
						}
					}
					possible_reports.push_back(building_report);
				}
				if fold(possible_reports.map(report_is_safe), fn(a: Bool, b: Bool) { a | b }, false) {
					n += 1;
				}
			}
		} else {
			break;
		}
	}
	io.println(n.to_string())
}

pub fn main(&io: &IO) {
	part_two(&io);
}